// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bots/bots.proto

package bots

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TelegramBotsService_AuthByInitData_FullMethodName = "/bots.TelegramBotsService/AuthByInitData"
	TelegramBotsService_AddBot_FullMethodName         = "/bots.TelegramBotsService/AddBot"
	TelegramBotsService_SetupBot_FullMethodName       = "/bots.TelegramBotsService/SetupBot"
)

// TelegramBotsServiceClient is the client API for TelegramBotsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelegramBotsServiceClient interface {
	AuthByInitData(ctx context.Context, in *AuthByInitDataRequest, opts ...grpc.CallOption) (*AuthByInitDataResponse, error)
	AddBot(ctx context.Context, in *AddBotRequest, opts ...grpc.CallOption) (*AddBotResponse, error)
	SetupBot(ctx context.Context, in *SetupBotRequest, opts ...grpc.CallOption) (*SetupBotResponse, error)
}

type telegramBotsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramBotsServiceClient(cc grpc.ClientConnInterface) TelegramBotsServiceClient {
	return &telegramBotsServiceClient{cc}
}

func (c *telegramBotsServiceClient) AuthByInitData(ctx context.Context, in *AuthByInitDataRequest, opts ...grpc.CallOption) (*AuthByInitDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthByInitDataResponse)
	err := c.cc.Invoke(ctx, TelegramBotsService_AuthByInitData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramBotsServiceClient) AddBot(ctx context.Context, in *AddBotRequest, opts ...grpc.CallOption) (*AddBotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBotResponse)
	err := c.cc.Invoke(ctx, TelegramBotsService_AddBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramBotsServiceClient) SetupBot(ctx context.Context, in *SetupBotRequest, opts ...grpc.CallOption) (*SetupBotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetupBotResponse)
	err := c.cc.Invoke(ctx, TelegramBotsService_SetupBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramBotsServiceServer is the server API for TelegramBotsService service.
// All implementations must embed UnimplementedTelegramBotsServiceServer
// for forward compatibility.
type TelegramBotsServiceServer interface {
	AuthByInitData(context.Context, *AuthByInitDataRequest) (*AuthByInitDataResponse, error)
	AddBot(context.Context, *AddBotRequest) (*AddBotResponse, error)
	SetupBot(context.Context, *SetupBotRequest) (*SetupBotResponse, error)
	mustEmbedUnimplementedTelegramBotsServiceServer()
}

// UnimplementedTelegramBotsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTelegramBotsServiceServer struct{}

func (UnimplementedTelegramBotsServiceServer) AuthByInitData(context.Context, *AuthByInitDataRequest) (*AuthByInitDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthByInitData not implemented")
}
func (UnimplementedTelegramBotsServiceServer) AddBot(context.Context, *AddBotRequest) (*AddBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBot not implemented")
}
func (UnimplementedTelegramBotsServiceServer) SetupBot(context.Context, *SetupBotRequest) (*SetupBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupBot not implemented")
}
func (UnimplementedTelegramBotsServiceServer) mustEmbedUnimplementedTelegramBotsServiceServer() {}
func (UnimplementedTelegramBotsServiceServer) testEmbeddedByValue()                             {}

// UnsafeTelegramBotsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegramBotsServiceServer will
// result in compilation errors.
type UnsafeTelegramBotsServiceServer interface {
	mustEmbedUnimplementedTelegramBotsServiceServer()
}

func RegisterTelegramBotsServiceServer(s grpc.ServiceRegistrar, srv TelegramBotsServiceServer) {
	// If the following call pancis, it indicates UnimplementedTelegramBotsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TelegramBotsService_ServiceDesc, srv)
}

func _TelegramBotsService_AuthByInitData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthByInitDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramBotsServiceServer).AuthByInitData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramBotsService_AuthByInitData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramBotsServiceServer).AuthByInitData(ctx, req.(*AuthByInitDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramBotsService_AddBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramBotsServiceServer).AddBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramBotsService_AddBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramBotsServiceServer).AddBot(ctx, req.(*AddBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramBotsService_SetupBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramBotsServiceServer).SetupBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramBotsService_SetupBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramBotsServiceServer).SetupBot(ctx, req.(*SetupBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelegramBotsService_ServiceDesc is the grpc.ServiceDesc for TelegramBotsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelegramBotsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bots.TelegramBotsService",
	HandlerType: (*TelegramBotsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthByInitData",
			Handler:    _TelegramBotsService_AuthByInitData_Handler,
		},
		{
			MethodName: "AddBot",
			Handler:    _TelegramBotsService_AddBot_Handler,
		},
		{
			MethodName: "SetupBot",
			Handler:    _TelegramBotsService_SetupBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bots/bots.proto",
}
